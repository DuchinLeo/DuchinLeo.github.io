{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"source/assets/mdImg/01-gitms03.jpeg","path":"assets/mdImg/01-gitms03.jpeg","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/assets/mdImg/1-gitsm02.png","path":"assets/mdImg/1-gitsm02.png","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1561174112615},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1561174112616},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1561174112617},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1561174112618},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1561174112618},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1561174112619},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1561174112619},{"_id":"themes/yilia/_config.yml","hash":"1667ce3ea4bc979778ea52140ad894a9b3a0a835","modified":1561192660920},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1561174112647},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1561174112695},{"_id":"source/_posts/gitOrder.md","hash":"22d5491c501d82876485af1263ab80a7c4fb742a","modified":1561195670663},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1561174112621},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1561174112622},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1561174112622},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1561174112623},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1561174112623},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1561174112624},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1561174112625},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1561174112643},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1561174112644},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1561174112644},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1561174112645},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561174112645},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1561174112646},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1561174112647},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1561174112691},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1561174112694},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1561174112648},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1561174112682},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561174112641},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1561174112692},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1561174112693},{"_id":"source/assets/mdImg/01-gitms03.jpeg","hash":"76257d833e52e8d084094cc6ab938deacf9625d5","modified":1561191360622},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1561174112627},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1561174112626},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1561174112627},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1561174112628},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1561174112629},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1561174112629},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1561174112630},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1561174112630},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1561174112631},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1561174112631},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1561174112632},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1561174112632},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1561174112633},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1561174112633},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1561174112642},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1561174112643},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1561174112684},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1561174112685},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1561174112686},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1561174112686},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1561174112687},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1561174112688},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1561174112689},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1561174112689},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1561174112690},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1561174112649},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1561174112650},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1561174112650},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1561174112651},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1561174112651},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1561174112652},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1561174112653},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1561174112653},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1561174112654},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1561174112658},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1561174112662},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1561174112663},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1561174112663},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1561174112664},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1561174112666},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1561174112667},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1561174112667},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1561174112668},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1561174112669},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1561174112669},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1561174112670},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1561174112670},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1561174112671},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1561174112671},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1561174112672},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1561174112673},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1561174112673},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1561174112675},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1561174112675},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1561174112676},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1561174112677},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1561174112677},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1561174112678},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1561174112678},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1561174112679},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1561174112680},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1561174112680},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1561174112681},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1561174112682},{"_id":"source/assets/mdImg/1-gitsm02.png","hash":"5e86772aca7e32cc9e37481f26d09e3e30e8d79e","modified":1561186476758},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1561174112641},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1561174112634},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1561174112635},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1561174112636},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1561174112636},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1561174112637},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1561174112637},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1561174112638},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1561174112638},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1561174112639},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1561174112640},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1561174112655},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1561174112655},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1561174112656},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1561174112657},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1561174112657},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1561174112659},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1561174112660},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1561174112665},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1561174112665},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1561174112666},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1561174112661},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1561174112662},{"_id":"public/content.json","hash":"74ca807e9377a4b7134cde66346a5313792d704c","modified":1561194938837},{"_id":"public/2019/06/22/gitOrder/index.html","hash":"519535f023bb8b754247d044aa8894f7f9e1ca8a","modified":1561194939053},{"_id":"public/archives/index.html","hash":"5cfdcd5b69c9cf887136ee09d75d82a1d3e6fdc8","modified":1561194939053},{"_id":"public/archives/2019/index.html","hash":"3d6c46a9ee614a7d7c10e2b3609084b7a1ff402a","modified":1561194939071},{"_id":"public/archives/2019/06/index.html","hash":"69b7f137d15c37ecbd4acfb8dd0af220b67e03ac","modified":1561194939071},{"_id":"public/index.html","hash":"ddd4ec17cc32e42424b424fbae5718b2a51f2116","modified":1561194939072},{"_id":"public/tags/工具/index.html","hash":"8f1ac972a8a6fe1f584767f5a36d2301d0f393c8","modified":1561194939073},{"_id":"public/tags/方法/index.html","hash":"4c0d886260a0672714e6be99cfcfcbe4f844c61b","modified":1561194939073}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Git 常用命令","date":"2019-06-22T06:14:51.000Z","toc":true,"comments":1,"_content":"\n![image](/assets/mdImg/01-gitms03.jpeg)\n\n## 一、创建本地仓库到连接远程\n\n0、安装 git hub 后初始化。\n全局设置：先要设置提交的用户名和邮箱，不设置则无法提交代码。\n\n```bash\ngit config --global user.name 名字     # 叫啥名字\ngit config --global user.email 邮箱     # 怎么联系你\n```\n<!-- more -->\n\n去掉--global 则只在当前项目中有效\n\n```js\ngit config user.name 名字     # 叫啥名字\ngit config user.email 邮箱    # 怎么联系你\n```\n\n查看配置信息\n`git config --list` , 查看命令如何使用，如`git commit --help`\n\n1.初始化建立本地仓库\n\n```js\n git init\n```\n\n2.创建远程仓库：在 github 或者 gitlab 创建远程仓库\n注：创建一个空的库，不需要远程库初始化\n步骤：\na、在自己的 git hub 上面 New 一个仓库，\n![image](/assets/mdImg/1-gitsm02.png)\n3.让本地仓库和远程仓库进行关联\n\n- SSH 方式\n  git remote add origin + 远程仓库的 SSH 链接接\n\n```js\ngit remote add origin <这里填远程仓库的ssh地址>\n```\n\n注: 第一次操作本地没有 SSH 密钥时，参考文档最底下的描述 4.进行添加和提交操作\n\n```js\n git add .\n    option：.点跟*，都表示所有文件，也可以写文件名\n git status\n    查看暂存区状态:\n\n git commit -m\"添加文件\"\n    option：-m\"这里是备注信息\"\n\n 取消已跟踪的文件取消继续跟踪\n git rm --cached <name>\n```\n\n5.push 到远程\n\n> 由于远程库是空的，第一次推送 master 分支时，加上-u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来。\n\n```js\n1.首次推送加-u可以使本地master跟远程的master关联起来，不想关联就不写\ngit push -u origin master：master\n    option:origin后面是本地分支跟远程分支的选项,当同分支时可以简写只写master\n2.第二次推送不需要加-u；本地master推送到远程dev\ngit push origin master：dev\n```\n\n---\n###### 创建 SSH 密钥\n\n1.创建 SSH Key\n\n- 在用户主目录（这里在 windows 下是指 c/user/Administrator/.ssh/id_rsa）下，看看有没有.ssh 目录。\n- 如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。\n- 如果没有，打开 Shell（Windows 下打开 Git Bash），创建 SSH Key：\n\n```javascript\n ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n- 需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可。\n- 由于这个 Key 也不是用于军事目的，所以也无需设置密码。\n- （测试的结果：C:\\Users\\Administrator.ssh 里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa\n  是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。）\n\n  2.登陆 GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。点“Add Key”，你就应该看到已经添加的 Key：\n  **注意两点：**\n\n- 为什么 GitHub 需要 SSH Key 呢？因为 GitHub 需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而 Git 支持 SSH 协议，所以，GitHub 只要知道了你的公钥，就可以确认只有你自己才能推送。\n- GitHub 允许你添加多个 Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。\n\n  3.测试 SSH key 是否添加成功\n  输入如下命令进行测试\n\n```js\nssh -T git@github.com\n```\n\n如果出现:\n\n```js\nHi zhanghaoming You;ve successfully auth.......\n```\n\n说明添加成功了\n\n---\n\n### 2、更新远程覆盖本地\n\n```js\n git fetch --all            #fetch所有分支上的内容，也可以选择只备份一部分内容\n```\n\n```js\ngit reset --hard origin/master          #重置本地分支\n```\n\n```js\ngit pull          拉取覆盖本地\n```\n\n### 3、切换版本\n\n> 在 Git 中，用 HEAD 表示当前版本。上一个版本就是 HEAD，上上一个版本就是 HEAD。，当然往上 100 个版本写 100 个比较容易数不过来，所以写成 HEAD~100。\n\n- 查看提交日志（所有的提交日志，最近到最远）\n\n```js\ngit log\n```\n\n- 查看提交的内容（比如更改了哪些类，删除了哪些文件等）\n\n```js\ngit log -p -1  //-p 选项展开每次提交的内容差异，用-1 则仅显示最近两次更新\n```\n\n- 查看命令历史（即：我们每一个命令）\n\n```js\ngit reflog\n```\n\n- 通过 git log 或者 git reflog 可以拿到每个版本的 commit_id，然后通过**切换版本/回退版本**的命令即可：\n\n```js\ngit reset --hard commit_id\n```\n\n##### 回退版本流程\n\n- 回退版本操作：\n\n```js\n  //git log 拿到commit_id\n  git log\n  //回到commit_id那个版本\n  git reset --hard commit_id\n```\n\n- 已经回退到了之前的版本，又想回到新版本\n\n```js\n  //查看所有的命令，然后找到新版本提交的 commit_id\n  git reflog\n  //去到新版本\n  git reset --hard commit_id\n```\n\n- 让这个文件回到最近一次 git commit 或 git add 时的状态\n\n```js\ngit checkout -- readme.txt\n```\n\n### 4、解决冲突\n\n- 合并冲突\n  > 1.通过 git status 查看冲突文件\n  > 2.Git 用\n  > , <<<<<<<\n  > 要合并的\n  > , =======\n  > 之前的\n  > , >>>>>>>\n  > 标记出不同分支的内容\n  > 3.修改文件，保存，再次提交即可\n  > 4.通过 git log 查看分支合并的情况\n\n```js\n  //提交的文件如果出现冲突就会出现这种提示\n  CONFLICT (content): Merge conflict in readme.txt\n\n  Automatic merge failed; fix conflicts and then commit the result.\n```\n***\n\n## 二、分类操作详解\n\n#### 1、add 操作\n\n- 添加单个文件\n\n```js\ngit add readme.txt\n```\n\n- 添加所有改变的文件\n\n```js\n1、添加所有内容\ngit add -A\n\n2、添加新文件和编辑过的文件不包括删除的文件\ngit add . or *\n\n3、添加编辑或者删除的文件，不包括新添加的文件\ngit add -u\n\n4、添加同时提交内容\ngit commit -am\"添加并提交到仓库的备注信息\"\n```\n\n#### 2、分支(branch)操作\n\n一下操作无特殊备注的**双引号均为了高亮**\n\n- 查看分支\n\n```js\ngit branch\n```\n\n- 创建分支\n\n```js\ngit branch \"name\"\n```\n\n- 切换分支\n\n```js\ngit checkout \"name\"\n```\n\n- 创建+切换分支\n\n```js\ngit checkout -b \"name\"\n```\n\n- 合并某分支到当前分支\n\n```js\ngit merge \"name\"\n```\n\n- 删除本地分支\n\n```js\ngit branch -d \"name\"\n```\n\n- 查看远程分支列表\n\n```js\n绿色代表当前项目所在的分支，红色就是远程分支列表\n\ngit branch -a\n```\n\n- 提交本地分支到远程分支\n\n```js\n dev:master  提交本地的dev分支到远程的master分支\n dev  提交本地的dev分支到远程的dev分支\n dev:null 提交本地的dev分支到远程的null分支，远程没有null分支会自动创建\n\ngit push origin dev:dev\n```\n\n- 从远程获取 dev 分支内容\n\n```js\ngit pull origin dev\n```\n\n- 删除远程分支\n\n```js\ngit push origin --delete \"branchName\"\n```\n\n- 重命名本地分支\n\n```js\ngit branch -m \"oldbranch\" \"newbranch\"\n```\n\n- 重命名远程分支\n\n```js\n删除远程分支 -> 重名名本地分支 -> 推送new的本地分支\n```\n\n#### 3、标签(tag)操作\n\n一下操作无特殊备注的**双引号均为了高亮**\n\n- 新建一个新标签\n\n```js\n默认新的标签是搭载在最近的commit上\ngit tag \"name\"\n```\n\n- 查看某个标签信息（标签不是按时间顺序列出，而是按字母排序的）\n\n```js\ngit show \"tagname\"\n```\n\n- 查看所有标签（标签不是按时间顺序列出，而是按字母排序的）\n\n```js\ngit tag\n```\n\n- 创建带有说明的标签，用-a 指定标签名，-m 指定说明文字\n\n```js\ngit tag -a v0.1 -m \"说明...\" 1234567\n```\n\n- 删除本地标签\n\n```js\n git tag -d \"v0.1\"\n```\n\n- 推送一个本地标签到远程\n\n```js\ngit push origin \"tagname\"\n```\n\n- 推送全部未推送过的本地标签到远程\n\n```js\ngit push origin --tags\n```\n\n- 删除一个远程标签(注意：先删除本地的)\n\n```js\n  git push origin :refs/tags/<tagname>\n```\n\n- tag 默认是打在最新的 commit 上的，如果想给已经 commit 过的内容添加标签如下：\n\n```js\n  git reflog //找到历史版本的 commit id = 1234567\n  git tag v1.0.0 1234567\n```\n\n- 获取远程 tag\n\n```js\n git fetch origin tag <tagname>\n```\n\n- 推送全部未推送过的本地标签到远程\n\n```js\ngit push origin --tags\n```\n\n- 推送全部未推送过的本地标签到远程\n\n```js\ngit push origin --tags\n```\n\n#### 4、数据合并、查看\n\n- 修改本地远程仓库地址：\n\n```js\ngit remote add origin url   # 设置本地的远程仓库地址\ngit remote rm origin    # 移除本地远程仓库地址\n```\n\n- 从远程服务器获取内容:\n\n```js\ngit pull orgin master 拉取远程仓库代码并合并\ngit fetch orgin master 拉取远程仓库代码不会合并，需要执行git merge origin/merge进行合并\n```\n\n- 远程代码强制合并本地代码：\n\n```js\ngit pull origin master --allow-unrelated-histories\n```\n\n- 仓库地址\n\n```js\ngit remote  -v       #查看本地的远程仓库地址\ngit remote rm origin  #移除本地远程仓库地址\ngit remote add origin  git@github.com:用户名/仓库名.git   #设置本地的远程仓库地址\n```\n\n- 查看文件的每行代码是谁写的(那个分支写的)，\n  git blame files\n\n#### 特殊处理\n\n- 仓库上传忽略\n\n```js\n.gitignore 忽略文件 内容要忽略推送的.文件名 *.jpg node_modules/\n```\n\n### 参考博客\n\n* [Git常用命令--了解这些就够了](https://www.jianshu.com/p/f92ed1ca8120)\n","source":"_posts/gitOrder.md","raw":"---\nlayout: post\ntitle: \"Git 常用命令\"\ndate: 2019-06-22 14:14:51\ntags:\n  - 工具\n  - 方法\ntoc: true\ncomments: true\n---\n\n![image](/assets/mdImg/01-gitms03.jpeg)\n\n## 一、创建本地仓库到连接远程\n\n0、安装 git hub 后初始化。\n全局设置：先要设置提交的用户名和邮箱，不设置则无法提交代码。\n\n```bash\ngit config --global user.name 名字     # 叫啥名字\ngit config --global user.email 邮箱     # 怎么联系你\n```\n<!-- more -->\n\n去掉--global 则只在当前项目中有效\n\n```js\ngit config user.name 名字     # 叫啥名字\ngit config user.email 邮箱    # 怎么联系你\n```\n\n查看配置信息\n`git config --list` , 查看命令如何使用，如`git commit --help`\n\n1.初始化建立本地仓库\n\n```js\n git init\n```\n\n2.创建远程仓库：在 github 或者 gitlab 创建远程仓库\n注：创建一个空的库，不需要远程库初始化\n步骤：\na、在自己的 git hub 上面 New 一个仓库，\n![image](/assets/mdImg/1-gitsm02.png)\n3.让本地仓库和远程仓库进行关联\n\n- SSH 方式\n  git remote add origin + 远程仓库的 SSH 链接接\n\n```js\ngit remote add origin <这里填远程仓库的ssh地址>\n```\n\n注: 第一次操作本地没有 SSH 密钥时，参考文档最底下的描述 4.进行添加和提交操作\n\n```js\n git add .\n    option：.点跟*，都表示所有文件，也可以写文件名\n git status\n    查看暂存区状态:\n\n git commit -m\"添加文件\"\n    option：-m\"这里是备注信息\"\n\n 取消已跟踪的文件取消继续跟踪\n git rm --cached <name>\n```\n\n5.push 到远程\n\n> 由于远程库是空的，第一次推送 master 分支时，加上-u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来。\n\n```js\n1.首次推送加-u可以使本地master跟远程的master关联起来，不想关联就不写\ngit push -u origin master：master\n    option:origin后面是本地分支跟远程分支的选项,当同分支时可以简写只写master\n2.第二次推送不需要加-u；本地master推送到远程dev\ngit push origin master：dev\n```\n\n---\n###### 创建 SSH 密钥\n\n1.创建 SSH Key\n\n- 在用户主目录（这里在 windows 下是指 c/user/Administrator/.ssh/id_rsa）下，看看有没有.ssh 目录。\n- 如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。\n- 如果没有，打开 Shell（Windows 下打开 Git Bash），创建 SSH Key：\n\n```javascript\n ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n- 需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可。\n- 由于这个 Key 也不是用于军事目的，所以也无需设置密码。\n- （测试的结果：C:\\Users\\Administrator.ssh 里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa\n  是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。）\n\n  2.登陆 GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。点“Add Key”，你就应该看到已经添加的 Key：\n  **注意两点：**\n\n- 为什么 GitHub 需要 SSH Key 呢？因为 GitHub 需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而 Git 支持 SSH 协议，所以，GitHub 只要知道了你的公钥，就可以确认只有你自己才能推送。\n- GitHub 允许你添加多个 Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。\n\n  3.测试 SSH key 是否添加成功\n  输入如下命令进行测试\n\n```js\nssh -T git@github.com\n```\n\n如果出现:\n\n```js\nHi zhanghaoming You;ve successfully auth.......\n```\n\n说明添加成功了\n\n---\n\n### 2、更新远程覆盖本地\n\n```js\n git fetch --all            #fetch所有分支上的内容，也可以选择只备份一部分内容\n```\n\n```js\ngit reset --hard origin/master          #重置本地分支\n```\n\n```js\ngit pull          拉取覆盖本地\n```\n\n### 3、切换版本\n\n> 在 Git 中，用 HEAD 表示当前版本。上一个版本就是 HEAD，上上一个版本就是 HEAD。，当然往上 100 个版本写 100 个比较容易数不过来，所以写成 HEAD~100。\n\n- 查看提交日志（所有的提交日志，最近到最远）\n\n```js\ngit log\n```\n\n- 查看提交的内容（比如更改了哪些类，删除了哪些文件等）\n\n```js\ngit log -p -1  //-p 选项展开每次提交的内容差异，用-1 则仅显示最近两次更新\n```\n\n- 查看命令历史（即：我们每一个命令）\n\n```js\ngit reflog\n```\n\n- 通过 git log 或者 git reflog 可以拿到每个版本的 commit_id，然后通过**切换版本/回退版本**的命令即可：\n\n```js\ngit reset --hard commit_id\n```\n\n##### 回退版本流程\n\n- 回退版本操作：\n\n```js\n  //git log 拿到commit_id\n  git log\n  //回到commit_id那个版本\n  git reset --hard commit_id\n```\n\n- 已经回退到了之前的版本，又想回到新版本\n\n```js\n  //查看所有的命令，然后找到新版本提交的 commit_id\n  git reflog\n  //去到新版本\n  git reset --hard commit_id\n```\n\n- 让这个文件回到最近一次 git commit 或 git add 时的状态\n\n```js\ngit checkout -- readme.txt\n```\n\n### 4、解决冲突\n\n- 合并冲突\n  > 1.通过 git status 查看冲突文件\n  > 2.Git 用\n  > , <<<<<<<\n  > 要合并的\n  > , =======\n  > 之前的\n  > , >>>>>>>\n  > 标记出不同分支的内容\n  > 3.修改文件，保存，再次提交即可\n  > 4.通过 git log 查看分支合并的情况\n\n```js\n  //提交的文件如果出现冲突就会出现这种提示\n  CONFLICT (content): Merge conflict in readme.txt\n\n  Automatic merge failed; fix conflicts and then commit the result.\n```\n***\n\n## 二、分类操作详解\n\n#### 1、add 操作\n\n- 添加单个文件\n\n```js\ngit add readme.txt\n```\n\n- 添加所有改变的文件\n\n```js\n1、添加所有内容\ngit add -A\n\n2、添加新文件和编辑过的文件不包括删除的文件\ngit add . or *\n\n3、添加编辑或者删除的文件，不包括新添加的文件\ngit add -u\n\n4、添加同时提交内容\ngit commit -am\"添加并提交到仓库的备注信息\"\n```\n\n#### 2、分支(branch)操作\n\n一下操作无特殊备注的**双引号均为了高亮**\n\n- 查看分支\n\n```js\ngit branch\n```\n\n- 创建分支\n\n```js\ngit branch \"name\"\n```\n\n- 切换分支\n\n```js\ngit checkout \"name\"\n```\n\n- 创建+切换分支\n\n```js\ngit checkout -b \"name\"\n```\n\n- 合并某分支到当前分支\n\n```js\ngit merge \"name\"\n```\n\n- 删除本地分支\n\n```js\ngit branch -d \"name\"\n```\n\n- 查看远程分支列表\n\n```js\n绿色代表当前项目所在的分支，红色就是远程分支列表\n\ngit branch -a\n```\n\n- 提交本地分支到远程分支\n\n```js\n dev:master  提交本地的dev分支到远程的master分支\n dev  提交本地的dev分支到远程的dev分支\n dev:null 提交本地的dev分支到远程的null分支，远程没有null分支会自动创建\n\ngit push origin dev:dev\n```\n\n- 从远程获取 dev 分支内容\n\n```js\ngit pull origin dev\n```\n\n- 删除远程分支\n\n```js\ngit push origin --delete \"branchName\"\n```\n\n- 重命名本地分支\n\n```js\ngit branch -m \"oldbranch\" \"newbranch\"\n```\n\n- 重命名远程分支\n\n```js\n删除远程分支 -> 重名名本地分支 -> 推送new的本地分支\n```\n\n#### 3、标签(tag)操作\n\n一下操作无特殊备注的**双引号均为了高亮**\n\n- 新建一个新标签\n\n```js\n默认新的标签是搭载在最近的commit上\ngit tag \"name\"\n```\n\n- 查看某个标签信息（标签不是按时间顺序列出，而是按字母排序的）\n\n```js\ngit show \"tagname\"\n```\n\n- 查看所有标签（标签不是按时间顺序列出，而是按字母排序的）\n\n```js\ngit tag\n```\n\n- 创建带有说明的标签，用-a 指定标签名，-m 指定说明文字\n\n```js\ngit tag -a v0.1 -m \"说明...\" 1234567\n```\n\n- 删除本地标签\n\n```js\n git tag -d \"v0.1\"\n```\n\n- 推送一个本地标签到远程\n\n```js\ngit push origin \"tagname\"\n```\n\n- 推送全部未推送过的本地标签到远程\n\n```js\ngit push origin --tags\n```\n\n- 删除一个远程标签(注意：先删除本地的)\n\n```js\n  git push origin :refs/tags/<tagname>\n```\n\n- tag 默认是打在最新的 commit 上的，如果想给已经 commit 过的内容添加标签如下：\n\n```js\n  git reflog //找到历史版本的 commit id = 1234567\n  git tag v1.0.0 1234567\n```\n\n- 获取远程 tag\n\n```js\n git fetch origin tag <tagname>\n```\n\n- 推送全部未推送过的本地标签到远程\n\n```js\ngit push origin --tags\n```\n\n- 推送全部未推送过的本地标签到远程\n\n```js\ngit push origin --tags\n```\n\n#### 4、数据合并、查看\n\n- 修改本地远程仓库地址：\n\n```js\ngit remote add origin url   # 设置本地的远程仓库地址\ngit remote rm origin    # 移除本地远程仓库地址\n```\n\n- 从远程服务器获取内容:\n\n```js\ngit pull orgin master 拉取远程仓库代码并合并\ngit fetch orgin master 拉取远程仓库代码不会合并，需要执行git merge origin/merge进行合并\n```\n\n- 远程代码强制合并本地代码：\n\n```js\ngit pull origin master --allow-unrelated-histories\n```\n\n- 仓库地址\n\n```js\ngit remote  -v       #查看本地的远程仓库地址\ngit remote rm origin  #移除本地远程仓库地址\ngit remote add origin  git@github.com:用户名/仓库名.git   #设置本地的远程仓库地址\n```\n\n- 查看文件的每行代码是谁写的(那个分支写的)，\n  git blame files\n\n#### 特殊处理\n\n- 仓库上传忽略\n\n```js\n.gitignore 忽略文件 内容要忽略推送的.文件名 *.jpg node_modules/\n```\n\n### 参考博客\n\n* [Git常用命令--了解这些就够了](https://www.jianshu.com/p/f92ed1ca8120)\n","slug":"gitOrder","published":1,"updated":"2019-06-22T09:29:02.794Z","_id":"cjx7b5bf600000ovd723zxe1f","photos":[],"link":"","content":"<p><img src=\"/assets/mdImg/01-gitms03.jpeg\" alt=\"image\"></p>\n<h2 id=\"一、创建本地仓库到连接远程\"><a href=\"#一、创建本地仓库到连接远程\" class=\"headerlink\" title=\"一、创建本地仓库到连接远程\"></a>一、创建本地仓库到连接远程</h2><p>0、安装 git hub 后初始化。<br>全局设置：先要设置提交的用户名和邮箱，不设置则无法提交代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name 名字     <span class=\"comment\"># 叫啥名字</span></span><br><span class=\"line\">git config --global user.email 邮箱     <span class=\"comment\"># 怎么联系你</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>去掉–global 则只在当前项目中有效</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name 名字     # 叫啥名字</span><br><span class=\"line\">git config user.email 邮箱    # 怎么联系你</span><br></pre></td></tr></table></figure>\n\n<p>查看配置信息<br><code>git config --list</code> , 查看命令如何使用，如<code>git commit --help</code></p>\n<p>1.初始化建立本地仓库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>2.创建远程仓库：在 github 或者 gitlab 创建远程仓库<br>注：创建一个空的库，不需要远程库初始化<br>步骤：<br>a、在自己的 git hub 上面 New 一个仓库，<br><img src=\"/assets/mdImg/1-gitsm02.png\" alt=\"image\"><br>3.让本地仓库和远程仓库进行关联</p>\n<ul>\n<li>SSH 方式<br>git remote add origin + 远程仓库的 SSH 链接接</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;这里填远程仓库的ssh地址&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注: 第一次操作本地没有 SSH 密钥时，参考文档最底下的描述 4.进行添加和提交操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">   option：.点跟*，都表示所有文件，也可以写文件名</span><br><span class=\"line\">git status</span><br><span class=\"line\">   查看暂存区状态:</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m<span class=\"string\">\"添加文件\"</span></span><br><span class=\"line\">   option：-m<span class=\"string\">\"这里是备注信息\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">取消已跟踪的文件取消继续跟踪</span><br><span class=\"line\">git rm --cached &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>5.push 到远程</p>\n<blockquote>\n<p>由于远程库是空的，第一次推送 master 分支时，加上-u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>首次推送加-u可以使本地master跟远程的master关联起来，不想关联就不写</span><br><span class=\"line\">git push -u origin master：master</span><br><span class=\"line\">    option:origin后面是本地分支跟远程分支的选项,当同分支时可以简写只写master</span><br><span class=\"line\"><span class=\"number\">2.</span>第二次推送不需要加-u；本地master推送到远程dev</span><br><span class=\"line\">git push origin master：dev</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"创建-SSH-密钥\"><a href=\"#创建-SSH-密钥\" class=\"headerlink\" title=\"创建 SSH 密钥\"></a>创建 SSH 密钥</h6><p>1.创建 SSH Key</p>\n<ul>\n<li>在用户主目录（这里在 windows 下是指 c/user/Administrator/.ssh/id_rsa）下，看看有没有.ssh 目录。</li>\n<li>如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。</li>\n<li>如果没有，打开 Shell（Windows 下打开 Git Bash），创建 SSH Key：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可。</p>\n</li>\n<li><p>由于这个 Key 也不是用于军事目的，所以也无需设置密码。</p>\n</li>\n<li><p>（测试的结果：C:\\Users\\Administrator.ssh 里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa<br>是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。）</p>\n<p>2.登陆 GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。点“Add Key”，你就应该看到已经添加的 Key：<br><strong>注意两点：</strong></p>\n</li>\n<li><p>为什么 GitHub 需要 SSH Key 呢？因为 GitHub 需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而 Git 支持 SSH 协议，所以，GitHub 只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n</li>\n<li><p>GitHub 允许你添加多个 Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。</p>\n<p>3.测试 SSH key 是否添加成功<br>输入如下命令进行测试</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>如果出现:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi zhanghaoming You;ve successfully auth.......</span><br></pre></td></tr></table></figure>\n\n<p>说明添加成功了</p>\n<hr>\n<h3 id=\"2、更新远程覆盖本地\"><a href=\"#2、更新远程覆盖本地\" class=\"headerlink\" title=\"2、更新远程覆盖本地\"></a>2、更新远程覆盖本地</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all            #fetch所有分支上的内容，也可以选择只备份一部分内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard origin/master          #重置本地分支</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull          拉取覆盖本地</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、切换版本\"><a href=\"#3、切换版本\" class=\"headerlink\" title=\"3、切换版本\"></a>3、切换版本</h3><blockquote>\n<p>在 Git 中，用 HEAD 表示当前版本。上一个版本就是 HEAD，上上一个版本就是 HEAD。，当然往上 100 个版本写 100 个比较容易数不过来，所以写成 HEAD~100。</p>\n</blockquote>\n<ul>\n<li>查看提交日志（所有的提交日志，最近到最远）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看提交的内容（比如更改了哪些类，删除了哪些文件等）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p <span class=\"number\">-1</span>  <span class=\"comment\">//-p 选项展开每次提交的内容差异，用-1 则仅显示最近两次更新</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看命令历史（即：我们每一个命令）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 git log 或者 git reflog 可以拿到每个版本的 commit_id，然后通过<strong>切换版本/回退版本</strong>的命令即可：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"回退版本流程\"><a href=\"#回退版本流程\" class=\"headerlink\" title=\"回退版本流程\"></a>回退版本流程</h5><ul>\n<li>回退版本操作：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//git log 拿到commit_id</span></span><br><span class=\"line\">git log</span><br><span class=\"line\"><span class=\"comment\">//回到commit_id那个版本</span></span><br><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>已经回退到了之前的版本，又想回到新版本</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看所有的命令，然后找到新版本提交的 commit_id</span></span><br><span class=\"line\">git reflog</span><br><span class=\"line\"><span class=\"comment\">//去到新版本</span></span><br><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>让这个文件回到最近一次 git commit 或 git add 时的状态</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- readme.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、解决冲突\"><a href=\"#4、解决冲突\" class=\"headerlink\" title=\"4、解决冲突\"></a>4、解决冲突</h3><ul>\n<li>合并冲突<blockquote>\n<p>1.通过 git status 查看冲突文件<br>2.Git 用<br>, &lt;&lt;&lt;&lt;&lt;&lt;&lt;\n要合并的<br>, =======<br>之前的<br>, &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>标记出不同分支的内容<br>3.修改文件，保存，再次提交即可<br>4.通过 git log 查看分支合并的情况</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//提交的文件如果出现冲突就会出现这种提示</span></span><br><span class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"二、分类操作详解\"><a href=\"#二、分类操作详解\" class=\"headerlink\" title=\"二、分类操作详解\"></a>二、分类操作详解</h2><h4 id=\"1、add-操作\"><a href=\"#1、add-操作\" class=\"headerlink\" title=\"1、add 操作\"></a>1、add 操作</h4><ul>\n<li>添加单个文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add readme.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加所有改变的文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、添加所有内容</span><br><span class=\"line\">git add -A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、添加新文件和编辑过的文件不包括删除的文件</span><br><span class=\"line\">git add . or *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、添加编辑或者删除的文件，不包括新添加的文件</span><br><span class=\"line\">git add -u</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、添加同时提交内容</span><br><span class=\"line\">git commit -am<span class=\"string\">\"添加并提交到仓库的备注信息\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、分支-branch-操作\"><a href=\"#2、分支-branch-操作\" class=\"headerlink\" title=\"2、分支(branch)操作\"></a>2、分支(branch)操作</h4><p>一下操作无特殊备注的<strong>双引号均为了高亮</strong></p>\n<ul>\n<li>查看分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建+切换分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>合并某分支到当前分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除本地分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看远程分支列表</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绿色代表当前项目所在的分支，红色就是远程分支列表</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提交本地分支到远程分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> dev:master  提交本地的dev分支到远程的master分支</span><br><span class=\"line\"> dev  提交本地的dev分支到远程的dev分支</span><br><span class=\"line\"> dev:<span class=\"literal\">null</span> 提交本地的dev分支到远程的<span class=\"literal\">null</span>分支，远程没有<span class=\"literal\">null</span>分支会自动创建</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin dev:dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从远程获取 dev 分支内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除远程分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --<span class=\"keyword\">delete</span> <span class=\"string\">\"branchName\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重命名本地分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m <span class=\"string\">\"oldbranch\"</span> <span class=\"string\">\"newbranch\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重命名远程分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除远程分支 -&gt; 重名名本地分支 -&gt; 推送<span class=\"keyword\">new</span>的本地分支</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、标签-tag-操作\"><a href=\"#3、标签-tag-操作\" class=\"headerlink\" title=\"3、标签(tag)操作\"></a>3、标签(tag)操作</h4><p>一下操作无特殊备注的<strong>双引号均为了高亮</strong></p>\n<ul>\n<li>新建一个新标签</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认新的标签是搭载在最近的commit上</span><br><span class=\"line\">git tag <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看某个标签信息（标签不是按时间顺序列出，而是按字母排序的）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show <span class=\"string\">\"tagname\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看所有标签（标签不是按时间顺序列出，而是按字母排序的）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建带有说明的标签，用-a 指定标签名，-m 指定说明文字</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0<span class=\"number\">.1</span> -m <span class=\"string\">\"说明...\"</span> <span class=\"number\">1234567</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除本地标签</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d <span class=\"string\">\"v0.1\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送一个本地标签到远程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin <span class=\"string\">\"tagname\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送全部未推送过的本地标签到远程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除一个远程标签(注意：先删除本地的)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tag 默认是打在最新的 commit 上的，如果想给已经 commit 过的内容添加标签如下：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog <span class=\"comment\">//找到历史版本的 commit id = 1234567</span></span><br><span class=\"line\">git tag v1<span class=\"number\">.0</span><span class=\"number\">.0</span> <span class=\"number\">1234567</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取远程 tag</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送全部未推送过的本地标签到远程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送全部未推送过的本地标签到远程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、数据合并、查看\"><a href=\"#4、数据合并、查看\" class=\"headerlink\" title=\"4、数据合并、查看\"></a>4、数据合并、查看</h4><ul>\n<li>修改本地远程仓库地址：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin url   # 设置本地的远程仓库地址</span><br><span class=\"line\">git remote rm origin    # 移除本地远程仓库地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从远程服务器获取内容:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull orgin master 拉取远程仓库代码并合并</span><br><span class=\"line\">git fetch orgin master 拉取远程仓库代码不会合并，需要执行git merge origin/merge进行合并</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>远程代码强制合并本地代码：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>仓库地址</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote  -v       #查看本地的远程仓库地址</span><br><span class=\"line\">git remote rm origin  #移除本地远程仓库地址</span><br><span class=\"line\">git remote add origin  git@github.com:用户名/仓库名.git   #设置本地的远程仓库地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看文件的每行代码是谁写的(那个分支写的)，<br>git blame files</li>\n</ul>\n<h4 id=\"特殊处理\"><a href=\"#特殊处理\" class=\"headerlink\" title=\"特殊处理\"></a>特殊处理</h4><ul>\n<li>仓库上传忽略</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.gitignore 忽略文件 内容要忽略推送的.文件名 *.jpg node_modules/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/f92ed1ca8120\" target=\"_blank\" rel=\"noopener\">Git常用命令–了解这些就够了</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/assets/mdImg/01-gitms03.jpeg\" alt=\"image\"></p>\n<h2 id=\"一、创建本地仓库到连接远程\"><a href=\"#一、创建本地仓库到连接远程\" class=\"headerlink\" title=\"一、创建本地仓库到连接远程\"></a>一、创建本地仓库到连接远程</h2><p>0、安装 git hub 后初始化。<br>全局设置：先要设置提交的用户名和邮箱，不设置则无法提交代码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name 名字     <span class=\"comment\"># 叫啥名字</span></span><br><span class=\"line\">git config --global user.email 邮箱     <span class=\"comment\"># 怎么联系你</span></span><br></pre></td></tr></table></figure>","more":"<p>去掉–global 则只在当前项目中有效</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name 名字     # 叫啥名字</span><br><span class=\"line\">git config user.email 邮箱    # 怎么联系你</span><br></pre></td></tr></table></figure>\n\n<p>查看配置信息<br><code>git config --list</code> , 查看命令如何使用，如<code>git commit --help</code></p>\n<p>1.初始化建立本地仓库</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>2.创建远程仓库：在 github 或者 gitlab 创建远程仓库<br>注：创建一个空的库，不需要远程库初始化<br>步骤：<br>a、在自己的 git hub 上面 New 一个仓库，<br><img src=\"/assets/mdImg/1-gitsm02.png\" alt=\"image\"><br>3.让本地仓库和远程仓库进行关联</p>\n<ul>\n<li>SSH 方式<br>git remote add origin + 远程仓库的 SSH 链接接</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;这里填远程仓库的ssh地址&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注: 第一次操作本地没有 SSH 密钥时，参考文档最底下的描述 4.进行添加和提交操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">   option：.点跟*，都表示所有文件，也可以写文件名</span><br><span class=\"line\">git status</span><br><span class=\"line\">   查看暂存区状态:</span><br><span class=\"line\"></span><br><span class=\"line\">git commit -m<span class=\"string\">\"添加文件\"</span></span><br><span class=\"line\">   option：-m<span class=\"string\">\"这里是备注信息\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">取消已跟踪的文件取消继续跟踪</span><br><span class=\"line\">git rm --cached &lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>5.push 到远程</p>\n<blockquote>\n<p>由于远程库是空的，第一次推送 master 分支时，加上-u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>首次推送加-u可以使本地master跟远程的master关联起来，不想关联就不写</span><br><span class=\"line\">git push -u origin master：master</span><br><span class=\"line\">    option:origin后面是本地分支跟远程分支的选项,当同分支时可以简写只写master</span><br><span class=\"line\"><span class=\"number\">2.</span>第二次推送不需要加-u；本地master推送到远程dev</span><br><span class=\"line\">git push origin master：dev</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h6 id=\"创建-SSH-密钥\"><a href=\"#创建-SSH-密钥\" class=\"headerlink\" title=\"创建 SSH 密钥\"></a>创建 SSH 密钥</h6><p>1.创建 SSH Key</p>\n<ul>\n<li>在用户主目录（这里在 windows 下是指 c/user/Administrator/.ssh/id_rsa）下，看看有没有.ssh 目录。</li>\n<li>如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。</li>\n<li>如果没有，打开 Shell（Windows 下打开 Git Bash），创建 SSH Key：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可。</p>\n</li>\n<li><p>由于这个 Key 也不是用于军事目的，所以也无需设置密码。</p>\n</li>\n<li><p>（测试的结果：C:\\Users\\Administrator.ssh 里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa<br>是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。）</p>\n<p>2.登陆 GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 文件的内容。点“Add Key”，你就应该看到已经添加的 Key：<br><strong>注意两点：</strong></p>\n</li>\n<li><p>为什么 GitHub 需要 SSH Key 呢？因为 GitHub 需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而 Git 支持 SSH 协议，所以，GitHub 只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n</li>\n<li><p>GitHub 允许你添加多个 Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。</p>\n<p>3.测试 SSH key 是否添加成功<br>输入如下命令进行测试</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n\n<p>如果出现:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi zhanghaoming You;ve successfully auth.......</span><br></pre></td></tr></table></figure>\n\n<p>说明添加成功了</p>\n<hr>\n<h3 id=\"2、更新远程覆盖本地\"><a href=\"#2、更新远程覆盖本地\" class=\"headerlink\" title=\"2、更新远程覆盖本地\"></a>2、更新远程覆盖本地</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all            #fetch所有分支上的内容，也可以选择只备份一部分内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard origin/master          #重置本地分支</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull          拉取覆盖本地</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、切换版本\"><a href=\"#3、切换版本\" class=\"headerlink\" title=\"3、切换版本\"></a>3、切换版本</h3><blockquote>\n<p>在 Git 中，用 HEAD 表示当前版本。上一个版本就是 HEAD，上上一个版本就是 HEAD。，当然往上 100 个版本写 100 个比较容易数不过来，所以写成 HEAD~100。</p>\n</blockquote>\n<ul>\n<li>查看提交日志（所有的提交日志，最近到最远）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看提交的内容（比如更改了哪些类，删除了哪些文件等）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -p <span class=\"number\">-1</span>  <span class=\"comment\">//-p 选项展开每次提交的内容差异，用-1 则仅显示最近两次更新</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看命令历史（即：我们每一个命令）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过 git log 或者 git reflog 可以拿到每个版本的 commit_id，然后通过<strong>切换版本/回退版本</strong>的命令即可：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"回退版本流程\"><a href=\"#回退版本流程\" class=\"headerlink\" title=\"回退版本流程\"></a>回退版本流程</h5><ul>\n<li>回退版本操作：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//git log 拿到commit_id</span></span><br><span class=\"line\">git log</span><br><span class=\"line\"><span class=\"comment\">//回到commit_id那个版本</span></span><br><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>已经回退到了之前的版本，又想回到新版本</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查看所有的命令，然后找到新版本提交的 commit_id</span></span><br><span class=\"line\">git reflog</span><br><span class=\"line\"><span class=\"comment\">//去到新版本</span></span><br><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>让这个文件回到最近一次 git commit 或 git add 时的状态</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- readme.txt</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、解决冲突\"><a href=\"#4、解决冲突\" class=\"headerlink\" title=\"4、解决冲突\"></a>4、解决冲突</h3><ul>\n<li>合并冲突<blockquote>\n<p>1.通过 git status 查看冲突文件<br>2.Git 用<br>, &lt;&lt;&lt;&lt;&lt;&lt;&lt;\n要合并的<br>, =======<br>之前的<br>, &gt;&gt;&gt;&gt;&gt;&gt;&gt;<br>标记出不同分支的内容<br>3.修改文件，保存，再次提交即可<br>4.通过 git log 查看分支合并的情况</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//提交的文件如果出现冲突就会出现这种提示</span></span><br><span class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"二、分类操作详解\"><a href=\"#二、分类操作详解\" class=\"headerlink\" title=\"二、分类操作详解\"></a>二、分类操作详解</h2><h4 id=\"1、add-操作\"><a href=\"#1、add-操作\" class=\"headerlink\" title=\"1、add 操作\"></a>1、add 操作</h4><ul>\n<li>添加单个文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add readme.txt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加所有改变的文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、添加所有内容</span><br><span class=\"line\">git add -A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>、添加新文件和编辑过的文件不包括删除的文件</span><br><span class=\"line\">git add . or *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>、添加编辑或者删除的文件，不包括新添加的文件</span><br><span class=\"line\">git add -u</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>、添加同时提交内容</span><br><span class=\"line\">git commit -am<span class=\"string\">\"添加并提交到仓库的备注信息\"</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、分支-branch-操作\"><a href=\"#2、分支-branch-操作\" class=\"headerlink\" title=\"2、分支(branch)操作\"></a>2、分支(branch)操作</h4><p>一下操作无特殊备注的<strong>双引号均为了高亮</strong></p>\n<ul>\n<li>查看分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建+切换分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>合并某分支到当前分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除本地分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看远程分支列表</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绿色代表当前项目所在的分支，红色就是远程分支列表</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>提交本地分支到远程分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> dev:master  提交本地的dev分支到远程的master分支</span><br><span class=\"line\"> dev  提交本地的dev分支到远程的dev分支</span><br><span class=\"line\"> dev:<span class=\"literal\">null</span> 提交本地的dev分支到远程的<span class=\"literal\">null</span>分支，远程没有<span class=\"literal\">null</span>分支会自动创建</span><br><span class=\"line\"></span><br><span class=\"line\">git push origin dev:dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从远程获取 dev 分支内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除远程分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --<span class=\"keyword\">delete</span> <span class=\"string\">\"branchName\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重命名本地分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m <span class=\"string\">\"oldbranch\"</span> <span class=\"string\">\"newbranch\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重命名远程分支</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">删除远程分支 -&gt; 重名名本地分支 -&gt; 推送<span class=\"keyword\">new</span>的本地分支</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3、标签-tag-操作\"><a href=\"#3、标签-tag-操作\" class=\"headerlink\" title=\"3、标签(tag)操作\"></a>3、标签(tag)操作</h4><p>一下操作无特殊备注的<strong>双引号均为了高亮</strong></p>\n<ul>\n<li>新建一个新标签</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">默认新的标签是搭载在最近的commit上</span><br><span class=\"line\">git tag <span class=\"string\">\"name\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看某个标签信息（标签不是按时间顺序列出，而是按字母排序的）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show <span class=\"string\">\"tagname\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看所有标签（标签不是按时间顺序列出，而是按字母排序的）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建带有说明的标签，用-a 指定标签名，-m 指定说明文字</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0<span class=\"number\">.1</span> -m <span class=\"string\">\"说明...\"</span> <span class=\"number\">1234567</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除本地标签</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d <span class=\"string\">\"v0.1\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送一个本地标签到远程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin <span class=\"string\">\"tagname\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送全部未推送过的本地标签到远程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除一个远程标签(注意：先删除本地的)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>tag 默认是打在最新的 commit 上的，如果想给已经 commit 过的内容添加标签如下：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog <span class=\"comment\">//找到历史版本的 commit id = 1234567</span></span><br><span class=\"line\">git tag v1<span class=\"number\">.0</span><span class=\"number\">.0</span> <span class=\"number\">1234567</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取远程 tag</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送全部未推送过的本地标签到远程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送全部未推送过的本地标签到远程</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4、数据合并、查看\"><a href=\"#4、数据合并、查看\" class=\"headerlink\" title=\"4、数据合并、查看\"></a>4、数据合并、查看</h4><ul>\n<li>修改本地远程仓库地址：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin url   # 设置本地的远程仓库地址</span><br><span class=\"line\">git remote rm origin    # 移除本地远程仓库地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从远程服务器获取内容:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull orgin master 拉取远程仓库代码并合并</span><br><span class=\"line\">git fetch orgin master 拉取远程仓库代码不会合并，需要执行git merge origin/merge进行合并</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>远程代码强制合并本地代码：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>仓库地址</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote  -v       #查看本地的远程仓库地址</span><br><span class=\"line\">git remote rm origin  #移除本地远程仓库地址</span><br><span class=\"line\">git remote add origin  git@github.com:用户名/仓库名.git   #设置本地的远程仓库地址</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看文件的每行代码是谁写的(那个分支写的)，<br>git blame files</li>\n</ul>\n<h4 id=\"特殊处理\"><a href=\"#特殊处理\" class=\"headerlink\" title=\"特殊处理\"></a>特殊处理</h4><ul>\n<li>仓库上传忽略</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.gitignore 忽略文件 内容要忽略推送的.文件名 *.jpg node_modules/</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/f92ed1ca8120\" target=\"_blank\" rel=\"noopener\">Git常用命令–了解这些就够了</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjx7b5bf600000ovd723zxe1f","tag_id":"cjx7b5bfe00010ovderdqtlp2","_id":"cjx7b5bfh00030ovdnbea0arr"},{"post_id":"cjx7b5bf600000ovd723zxe1f","tag_id":"cjx7b5bfg00020ovd3tzggk4t","_id":"cjx7b5bfi00040ovdhtym6y6y"}],"Tag":[{"name":"工具","_id":"cjx7b5bfe00010ovderdqtlp2"},{"name":"方法","_id":"cjx7b5bfg00020ovd3tzggk4t"}]}}